const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Error: Variables de entorno de Supabase no configuradas');
  console.error('Aseg√∫rate de crear un archivo .env.local con:');
  console.error('NEXT_PUBLIC_SUPABASE_URL=tu_url_aqui');
  console.error('NEXT_PUBLIC_SUPABASE_ANON_KEY=tu_clave_aqui');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testSupabaseConnection() {
  console.log('üîç Probando conexi√≥n con Supabase...');
  console.log('URL:', supabaseUrl);
  console.log('Clave configurada:', supabaseAnonKey ? '‚úÖ' : '‚ùå');

  try {
    // Probar conexi√≥n b√°sica
    console.log('\nüì° Probando conexi√≥n b√°sica...');
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1);

    if (error) {
      console.error('‚ùå Error de conexi√≥n:', error.message);
      
      if (error.message.includes('relation "users" does not exist')) {
        console.log('\nüí° Soluci√≥n: Ejecuta el archivo supabase-schema.sql en el SQL Editor de Supabase');
      }
      
      return false;
    }

    console.log('‚úÖ Conexi√≥n exitosa');

    // Probar tablas principales
    const tables = ['users', 'services', 'posts', 'messages', 'contact_info'];
    
    console.log('\nüìä Verificando tablas...');
    for (const table of tables) {
      try {
        const { error: tableError } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (tableError) {
          console.log(`‚ùå Tabla ${table}: ${tableError.message}`);
        } else {
          console.log(`‚úÖ Tabla ${table}: OK`);
        }
      } catch (err) {
        console.log(`‚ùå Tabla ${table}: Error inesperado`);
      }
    }

    // Probar inserci√≥n de prueba
    console.log('\nüß™ Probando inserci√≥n de prueba...');
    const testData = {
      name: 'Test User',
      email: 'test@example.com',
      password: 'test123',
      role: 'USER'
    };

    const { data: insertData, error: insertError } = await supabase
      .from('users')
      .insert(testData)
      .select()
      .single();

    if (insertError) {
      console.log('‚ùå Error en inserci√≥n de prueba:', insertError.message);
    } else {
      console.log('‚úÖ Inserci√≥n de prueba exitosa');
      
      // Limpiar datos de prueba
      const { error: deleteError } = await supabase
        .from('users')
        .delete()
        .eq('email', 'test@example.com');
      
      if (deleteError) {
        console.log('‚ö†Ô∏è No se pudo limpiar datos de prueba:', deleteError.message);
      } else {
        console.log('‚úÖ Datos de prueba limpiados');
      }
    }

    console.log('\nüéâ ¬°Todas las pruebas completadas!');
    console.log('Tu configuraci√≥n de Supabase est√° funcionando correctamente.');
    
    return true;

  } catch (error) {
    console.error('‚ùå Error inesperado:', error);
    return false;
  }
}

// Ejecutar pruebas
testSupabaseConnection()
  .then(success => {
    if (success) {
      console.log('\nüöÄ ¬°Listo para usar Supabase en tu aplicaci√≥n!');
    } else {
      console.log('\nüîß Revisa la configuraci√≥n y vuelve a intentar.');
    }
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  }); 